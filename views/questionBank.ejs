<% function getDifficultyColor(difficulty) { %>
    <% if (difficulty === 'easy') { %>
        <% return 'green'; %>
    <% } else if (difficulty === 'medium') { %>
        <% return 'yellow'; %>
    <% } else if (difficulty === 'hard') { %>
        <% return 'red'; %>
    <% } else { %>
        <% return 'white'; // Default color %>
    <% } %>
<% } %>




<head>
    <link href='https://unpkg.com/boxicons@2.1.4/css/boxicons.min.css' rel='stylesheet'>
    <link rel="stylesheet" href="/css/styleQuestion.css">
    <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/4.7.0/css/font-awesome.min.css">
    <script src="https://unpkg.com/boxicons@2.1.4/dist/boxicons.js"></script>
    <style>
        @import url('https://fonts.googleapis.com/css?family=Fira+Mono:400');
    </style>
</head>

<body>
    <!-- <div style="margin:0%; padding: 0%; position: static;"> -->
    <div class="navBar">
        <!-- <video src="background.mp4" muted autoplay loop playsinline style="display: fixed; size: 1px;"></video>
                -->

        <div class="logo">
            <a href="/home"><img src="/images/logo.png" class="logoMain"></a>
            
        </div>

        <div class="all_icons">
            <div class="panelIcon"><a href="/profile"><img src="/images/profile.png"></a></a></div>
            <div class="panel2Icon"><a href="/home"><img src="/images/home.png"></a></div>
            <div class="panel3Icon"><a href="/questionbank"><img src="/images/greeenCodeBank.png"></a></div>

        </div>

        <div class="searchAndExit">
            <div class="searchBar">
                <div class="searchInput"><input type="text" placeholder="Search" class="searchi" id="searchInput"></div>
                <!-- <div class="searchImage"><ion-icon name="search-outline" class="search" type="button" value="Join" id="create_realme"></ion-icon></div> -->
                <input type="button" class="searchbit"
                    style="display: flex; background-color: transparent; border-style: none;" value="🔍"
                    id="create_realme">

            </div>
            <div class="Exit">

                <img src="/images/user_profile.png" name="exit-outline" class="exitIcon" id="exitIcon"
                    onclick="wrong"></ion-icon>
                <div class="profileOptions">
                    <ul>
                        <li><a href="/logout">Logout</a></li>
                        <li><a href="#">Settings</a></li>
                    </ul>
                </div>
            </div>

        </div>


    </div>
    <!-- </div> -->

    <script src="https://unpkg.com/boxicons@2.1.4/dist/boxicons.js"></script>
    <script type="module" src="https://unpkg.com/ionicons@7.1.0/dist/ionicons/ionicons.esm.js"></script>
    <script nomodule src="https://unpkg.com/ionicons@7.1.0/dist/ionicons/ionicons.js"></script>
    <script src="navjs1.js"></script>
    <div class="overall2">

        <div class="overallQ" style="position: fixed; z-index: -1;">
            <video src="/videos/background.mp4" autoplay muted loop></video>
        </div>

        <div class="main_page_Layout">
            <div class="headings">
                <h2>
                    <span>P</span><span>R</span><span>A</span><span>C</span><span>T</span><span>I</span><span>S</span><span>E</span>
                    <>
                </h2>
            </div>





            <div class="right_upper">
                <div class="option">
                    <input checked="" value="option1" name="btn" type="radio" class="input" id="all"
                        onclick="filterQuestions('all')">
                    <div class="btn">
                        <span class="span">All</span>
                    </div>
                </div>
                <div class="option">
                    <input value="option2" name="btn" type="radio" class="input" id="easy"
                        onclick="filterQuestions('easy')">
                    <div class="btn">
                        <span class="span">Easy</span>
                    </div>
                </div>
                <div class="option">
                    <input checked="" value="option1" name="btn" type="radio" class="input" id="medium"
                        onclick="filterQuestions('medium')">
                    <div class="btn">
                        <span class="span">Medium</span>
                    </div>
                </div>
                <div class="option">
                    <input value="option3" name="btn" type="radio" class="input" id="hard"
                        onclick="filterQuestions('hard')">
                    <div class="btn">
                        <span class="span">Hard</span>
                    </div>
                </div>
            </div>

            <div class="dropdown-container">

            </div>


        </div>


        <div class="right_section">
            <div class="main_page_Layout1">
                <div class="heading">
                    <h3>
                        <span>I</span>M<span>POSSIBLE</span>
                        QUESTIONS
                    </h3>
                </div>
                <div class="questionD">
                    <div class="questioninfo" id="question-info">
                        <h4>
                            <pre class="glitch" title="<%= problem.text %>">
                                <%= problem.text %>
                            </pre>
                        </h4>
                        <h4>
                            <pre class="glitch" title="Question Test Input 1">
                                Question Test Input 1: <%= problem.QuestionTestInput01 %>
                            </pre>
                        </h4>
                        <h4>
                            <pre class="glitch" title="Question Test Output 1">
                                Question Test Output 1: <%= problem.questionTestOutput1 %>
                            </pre>
                        </h4>
                        
                    </div>
                    <button class="codehere" onclick="redirectToPage('<%= problem.QuestionId %>')"
                        >
                        CODE HERE!!
                    </button>
                </div>
            </div>
            <div class="bookmarks">
                <div class="heading">
                    <h3>
                        <span>B</span>OOKMARKS
                    </h3>
                </div>
                <div class="bookmarkContent">
                    <% bookmarks.forEach(bookmark => { %>
                        <div class="bookmarkedQuestion">
                            <span class="level" style="color: <%= getDifficultyColor(bookmark.difficultyColor) %>">LEVEL <%= bookmark.difficulty.toUpperCase() %></span>
                            <%= bookmark.questionTitle %>
                            <button onclick="removeBookmark('<%= bookmark.id %>')">Remove</button>
                        </div>
                    <% }); %>
                </div>
                
                

            </div>

        </div> <!-- Closing right_section div -->



    </div>



    </div>
    <footer id="footer">
        <div class="container">
            <div class="row">
                <div class="col-md-3">

                    <div class="footer-about">
                        <img style="height: 250px; width: 400PX; margin-top: -50px;" src="/imgs/cserlm.png"
                            alt="csrelm">
                        <p style="margin-top: -20px;">Lorem Ipsum is simply dummy text of the printing and typesetting
                            industry. since the 1500s,
                        </p>
                    </div>

                </div>
                <div class="col-md-3">
                    <div class="useful-link">
                        <h2>Useful Links</h2>
                        <img src="./assets/images/about/home_line.png" alt="" class="img-fluid">
                        <div class="use-links">
                            <li><a href="/index" class="footerlink"><i class="fa-solid fa-angles-right"></i> Home</a>
                            </li>
                            <li><a href="/about" class="footerlink"><i class="fa-solid fa-angles-right"></i> About
                                    Us</a></li>
                            <li><a href="/gallery" class="footerlink"><i class="fa-solid fa-angles-right"></i>
                                    Gallery</a></li>
                            <li><a href="/contact" class="footerlink"><i class="fa-solid fa-angles-right"></i>
                                    Contact</a></li>
                        </div>
                    </div>

                </div>
                <div class="col-md-3">
                    <div class="social-links">
                        <h2>Follow Us</h2>
                        <img src="./assets/images/about/home_line.png" alt="">
                        <div class="social-icons">
                            <li><a href="" class="socialL"><i class="fa-brands fa-facebook-f"></i> Facebook</a></li>
                            <li><a href="" class="socialL"><i class="fa-brands fa-instagram"></i> Instagram</a></li>
                            <li><a href="" class="socialL"><i class="fa-brands fa-linkedin-in"></i> Linkedin</a></li>
                        </div>
                    </div>


                </div>
                <div class="col-md-3">
                    <div class="address">
                        <h2>Address</h2>
                        <img src="./assets/images/about/home_line.png" alt="" class="img-fluid">
                        <div class="address-links">
                            <li class="address1"><i class="fa-solid fa-location-dot"></i> iiit sricity
                                sricity
                                andhra pradesh 517646</li>
                            <li><a href="" class="addressL"><i class="fa-solid fa-phone"></i> +91 9938584270</a></li>
                            <li><a href="" class="addressL"><i class="fa-solid fa-envelope"></i> coderealms@iiits.in</a>
                            </li>
                        </div>
                    </div>
                </div>

            </div>
        </div>
        </div>
    </footer>
    <!-- footer section end -->
    <!-- footer copy right section start -->
    <section id="copy-right">
        <div class="copy-right-sec"><i class="fa-solid fa-copyright"></i>

            code realms a project by <a href="#" class="zeni">team zenith</a>


        </div>

    </section>
    <script>

        function filterQuestions(difficulty) {
            let questionCardsContainer = document.querySelector('.dropdown-container');
            let questionCards = document.querySelectorAll('.questionCard');
            let filteredCards = [];

            questionCards.forEach(card => {
                if (difficulty === 'all' || card.dataset.difficulty === difficulty) {
                    filteredCards.push(card);
                    card.style.visibility = 'visible'; // Show the card
                } else {
                    card.style.visibility = 'hidden'; // Hide the card
                }
            });

            // Move filtered cards to the top of the container
            filteredCards.forEach(card => {
                questionCardsContainer.prepend(card);
            });
        }

        async function fetchAllProblemsByDifficulty(difficulty) {
            try {
                const response = await fetch(`/problems/${difficulty}`);
                const problems = await response.json();
                return problems;
            } catch (error) {
                console.error(`Error fetching ${difficulty} problems`, error);
                return [];
            }
        }

        async function updateQuestionCards(difficulty) {
            try {
                const problems = await fetchAllProblemsByDifficulty(difficulty);
                const questionCardsContainer = document.querySelector('.dropdown-container');

                problems.forEach(problem => {
                    // Generate a random number between 1 and 3 (assuming you have 3 images)
                    const randomImageIndex = Math.floor(Math.random() * 52) + 1;
                    const imagePath = `/images/PNG-cards-1.3/image (${randomImageIndex}).png`;

                    const cardHTML = `
                <div class="questionCard" id="${problem._id}" data-difficulty="${difficulty}") >
                    <div class="flip">
                        <div class="QuestionUpper" id="${problem._id}" style="background-image: url('${imagePath}'); background-size:contain;background-repeat:no-repeat" >
                        </div>
                        <div class="QuestionDown" >
                            <div class="Down1" onclick=redirectToPage("${problem.QuestionId}")>
                                <p>${problem.QuestionTitle}</p>
                            </div>
                            <hr>
                            <div class="Down2">
                                <div class="iconFire">
                                    <box-icon name='bookmark-alt' type='solid' color='#d29e22'></box-icon>
                                    <span id="${difficulty}e">LEVEL ${difficulty.toUpperCase()}</span>
                                </div>
                            </div>
                        </div>
                    </div>
                </div>
            `;
                    questionCardsContainer.insertAdjacentHTML('beforeend', cardHTML);
                });
            } catch (error) {
                console.error(`Error updating ${difficulty} question cards`, error);
            }

            // Bookmarking
            document.querySelectorAll('.iconFire').forEach(icon => {
                icon.addEventListener('click', async () => {
                    const questionCard = icon.closest('.questionCard');
                    const questionText = questionCard.querySelector('.QuestionDown .Down1 p').innerText;
                    const difficulty = questionCard.dataset.difficulty;
                    const bookmarkContent = document.querySelector('.bookmarkContent');

                    // Check if the question is already bookmarked
                    const existingBookmark = [...bookmarkContent.querySelectorAll('.bookmarkedQuestion')]
                        .find(bookmark => bookmark.dataset.question === questionText);

                    if (existingBookmark) {
                        // If already bookmarked, remove from display and delete from database
                        bookmarkContent.removeChild(existingBookmark);
                        await deleteBookmarkFromDatabase(questionText);
                        console.log('Bookmark removed successfully');
                    } else {
                        // If not bookmarked, add to display and database
                        const bookmarkedQuestionDiv = createBookmarkElement(questionText, difficulty);
                        bookmarkContent.appendChild(bookmarkedQuestionDiv);
                        await addBookmarkToDatabase(questionText, difficulty);
                        console.log('Bookmark added successfully');
                    }
                });
            });
        }

        // Call the function for each difficulty level
        updateQuestionCards('easy');
        updateQuestionCards('medium');
        updateQuestionCards('hard');



        // JavaScript


        async function addBookmarkToDatabase(questionText, difficulty) {
            // Send a POST request to the server to add the bookmark
            try {
                const response = await fetch('/bookmark', {
                    method: 'POST',
                    headers: {
                        'Content-Type': 'application/json'
                    },
                    body: JSON.stringify({ questionText, difficulty })
                });
                if (!response.ok) {
                    throw new Error('Failed to add bookmark');
                }
            } catch (error) {
                console.error('Error adding bookmark:', error);
            }
        }

        async function deleteBookmarkFromDatabase(questionText) {
            // Send a DELETE request to the server to remove the bookmark
            try {
                const response = await fetch('/bookmark', {
                    method: 'DELETE',
                    headers: {
                        'Content-Type': 'application/json'
                    },
                    body: JSON.stringify({ questionText })
                });
                if (!response.ok) {
                    throw new Error('Failed to delete bookmark');
                }
            } catch (error) {
                console.error('Error deleting bookmark:', error);
            }
        }

        function createBookmarkElement(questionText, difficulty) {
            // Create a new div to represent the bookmarked question
            const bookmarkedQuestionDiv = document.createElement('div');
            bookmarkedQuestionDiv.classList.add('bookmarkedQuestion'); // Apply CSS class
            bookmarkedQuestionDiv.dataset.question = questionText;

            // Create level span with appropriate color based on difficulty
            const levelSpan = document.createElement('span');
            levelSpan.classList.add('level');
            levelSpan.textContent = `LEVEL ${difficulty.toUpperCase()}`;
            if (difficulty === 'easy') {
                levelSpan.style.color = 'green'; // Easy level color
            } else if (difficulty === 'medium') {
                levelSpan.style.color = 'yellow'; // Medium level color
            } else if (difficulty === 'hard') {
                levelSpan.style.color = 'red'; // Hard level color
            }

            // Append level span and question text to the bookmarked question div
            bookmarkedQuestionDiv.appendChild(levelSpan);
            bookmarkedQuestionDiv.appendChild(document.createTextNode(questionText));

            return bookmarkedQuestionDiv;
        }
        function redirectToPage(probId) {
            // Logic to get the question ID and redirect to the corresponding path
            const questionID = probId; // Replace with your logic to get the question ID
            window.location.href = `/RCET/practice/${questionID}`;
        }



        //codeHere
        function redirectToPage(questionId) {
            // Construct the URL using the provided questionId
            const url = `/RCET/practice/${questionId}`;


            // Redirect to the constructed URL
            window.location.href = url;
        }

        async function removeBookmark(bookmarkId) {
    try {
        // Send a DELETE request to the server to remove the bookmark
        const response = await fetch('/bookmark', {
            method: 'DELETE',
            headers: {
                'Content-Type': 'application/json'
            },
            body: JSON.stringify({ bookmarkId })
        });
        if (!response.ok) {
            throw new Error('Failed to delete bookmark');
        }
        
        // Remove the bookmark element from the DOM
        const bookmarkElement = document.querySelector(`.bookmarkedQuestion[data-id="${bookmarkId}"]`);
        if (bookmarkElement) {
            bookmarkElement.remove();
        }
        
        console.log('Bookmark removed successfully');
    } catch (error) {
        console.error('Error removing bookmark:', error);
    }
}



const searchInput = document.getElementById('searchInput');

// Add event listener for key press
searchInput.addEventListener('keypress', function (event) {
    // Check if Enter key is pressed
    if (event.key === 'Enter') {
        // Get the value from the search input
        const searchTerm = searchInput.value;
        console.log(searchTerm);
        // Redirect to the realm_search page with the search term as a query parameter
        window.location.href = `/realm_search?q=${searchTerm}`;
    }
});



    </script>

</body>